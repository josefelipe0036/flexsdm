% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_env_dist.R
\name{map_env_dist}
\alias{map_env_dist}
\title{Predict environmental distance}
\usage{
map_env_dist(training_data, projection_data, metric = "domain")
}
\arguments{
\item{training_data}{data.frame or tibble with environmental conditions of
presence used for constructing models}

\item{projection_data}{SpatRaster, data.frame or tibble with environmental condition used for projecting a model (e.g.,
a larger, encompassing region, a spatially separate region, or a different time period).
If data.frame or tibble is used function will return a tibble object.
Otherwise, as SpatRaster object.}

\item{metric}{character. Metric used for measuring distance. Default "domain".}
}
\value{
A SpatRaster or tibble object with the nearest environmental distance between presences and projection data.
So far only the Domain algorithm (based on the Gower distance) has been implemented.
}
\description{
Predict environmental distance
}
\examples{
\dontrun{
require(dplyr)
require(terra)
data(spp)
f <- system.file("external/somevar.tif", package = "flexsdm")
somevar <- terra::rast(f)

# Let's use only two variables to turn more evident the pater in the environmental space
somevar <- somevar[[1:2]]
names(somevar) <- c("aet", "cwd")


spp$species \%>\% unique()
sp <- spp \%>\%
  dplyr::filter(species == "sp3", pr_ab == 1) \%>\%
  dplyr::select(x, y, pr_ab)

# Get environmental condition of presences
sp_pa_2 <- sdm_extract(
  data = sp,
  x = "x",
  y = "y",
  env_layer = somevar
)
sp_pa_2

# Measure degree of extrapolation based on Mahalanobis and
# for a projection area based on a SpatRaster object
envdist <-
  map_env_dist(
    training_data = sp_pa_2,
    projection_data = somevar,
    metric = "domain"
  )
plot(envdist, main = "Domain")
p_extra(
  training_data = sp_pa_2,
  x = "x",
  y = "y",
  pr_ab = "pr_ab",
  extra_suit_data = envdist,
  projection_data = somevar,
  geo_space = FALSE,
  prop_points = 0.8,
  alpha_p = 0.9,
  color_p = "red",
  color_gradient = c("#000033", "#1400FF", "#C729D6", "#FF9C63", "#FFFF60")
)

}
}
